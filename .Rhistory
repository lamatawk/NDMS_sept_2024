# cleaning around
# ==============================================================================
rm(list=ls()) # removing variables
graphics.off() # clearing plotting devices
cat("\014") # clearing console
# ==============================================================================
# load the extraction functions
# ==============================================================================
source("pdfExtractor.R")
outKey2 <- freqKeywords("eco_landscape.pdf", "Keywords.csv", "english")
# cleaning around
# ==============================================================================
rm(list=ls()) # removing variables
source("pdfExtractor.R")
# ==============================================================================
# Examples for all the functions
# ==============================================================================
# Ex1- use of the function that extracts all the words, removes stopwords
#      and finds the frequency of the remaining ones
outFull1 <- freqFullWords("example.pdf", "english")
outFull1
outFull2 <- freqFullWords("hawai.pdf", "english")
outFull2
# Ex2- use of the function that extracts the keywords you specify in a csv
#      and finds their frequencies
outKey1 <- freqKeywords("example.pdf", "Keywords_example.csv", "english")
outKey1
outKey2 <- freqKeywords("eco_landscape.pdf", "Keywords.csv", "english")
outKey2
# ==============================================================================
outFull2 <- freqFullWords("landscape_guide.pdf", "english")
# ==============================================================================
rm(list=ls()) # removing variables
graphics.off() # clearing plotting devices
cat("\014") # clearing console
# ==============================================================================
# load the extraction functions
# ==============================================================================
source("pdfExtractor.R")
# ==============================================================================
rm(list=ls()) # removing variables
graphics.off() # clearing plotting devices
cat("\014") # clearing console
# ==============================================================================
# load the extraction functions
# ==============================================================================
source("pdfExtractor.R")
# load the necessary packages (install if necessary)
# ==============================================================================
reqpacks <- c("pdftools",   # handling of pdf content
"tm",         # text mining
"dplyr",      # smart object handling
"tibble")     # smart table handling
outFull2 <- freqFullWords("eco_landscape.pdf", "english")
outFull2
outFull2 <- freqFullWords("eco_landscape.pdf", "english")
rm(list=ls()) # removing variables
graphics.off() # clearing plotting devices
cat("\014") # clearing console
# ==============================================================================
# load the extraction functions
# ==============================================================================
source("pdfExtractor.R")
# ==============================================================================
# Examples for all the functions
# ==============================================================================
# Ex1- use of the function that extracts all the words, removes stopwords
#      and finds the frequency of the remaining ones
outFull1 <- freqFullWords("example.pdf", "english")
outFull1
outFull2 <- freqFullWords("eco_landscape.pdf", "english")
outFull2
getwd()
setwd("C:/Users/lamat/OneDrive/Documents/GitHub/NDMS_sept_2024")
source("~/GitHub/NDMS_sept_2024/NDMS_sept_2024.R", echo=TRUE)
getwd()
# getwd()
# setwd("C:/Users/lamat/OneDrive/Documents/GitHub/NDMS_sept_2024")
# Install necessary packages if not already installed
if (!requireNamespace("vegan", quietly = TRUE)) {
install.packages("vegan")
}
if (!requireNamespace("ggplot2", quietly = TRUE)) {
install.packages("ggplot2")
}
if (!requireNamespace("ggrepel", quietly = TRUE)) {
install.packages("ggrepel")
}
# Load the necessary libraries
library(vegan)
library(ggplot2)
library(ggrepel)
# Assuming data is already loaded
# NMDS for Group 1: Urban and Economic Metrics
urban_economic_variables <- data[, c("POPULATION", "BUILDVALUE", "AGRIVALUE", "AREA")]
library(vegan)
library(ggplot2)
library(ggrepel)
# Load the data file
data <- read.csv("data_ALL_geocoded_stats_sept2024_for_nmds.csv")
# NMDS for Group 1: Urban and Economic Metrics
urban_economic_variables <- data[, c("POPULATION", "BUILDVALUE", "AGRIVALUE", "AREA")]
nmds_urban_economic <- metaMDS(urban_economic_variables, distance = "euclidean", k = 2, trymax = 100)
envfit_urban_economic <- envfit(nmds_urban_economic, urban_economic_variables, perm = 999)
nmds_scores_urban_economic <- as.data.frame(scores(nmds_urban_economic, "sites"))
env_scores_urban_economic <- as.data.frame(scores(envfit_urban_economic, "vectors"))
env_scores_urban_economic$Variable <- rownames(env_scores_urban_economic)
# Plot NMDS for Urban and Economic Metrics
ggplot() +
geom_point(data = nmds_scores_urban_economic, aes(x = NMDS1, y = NMDS2), size = 3, color = "black") +
geom_text_repel(data = nmds_scores_urban_economic, aes(x = NMDS1, y = NMDS2, label = rownames(nmds_scores_urban_economic)), size = 3, color = "darkgray", box.padding = 0.5) +
geom_segment(data = env_scores_urban_economic, aes(x = 0, xend = NMDS1, y = 0, yend = NMDS2),
arrow = arrow(length = unit(0.3, "cm")), color = "blue") +
geom_text_repel(data = env_scores_urban_economic, aes(x = NMDS1, y = NMDS2, label = Variable),
color = "blue", size = 4, box.padding = 0.5) +
theme_minimal() +
labs(title = "NMDS Plot for Urban and Economic Metrics",
x = "NMDS1",
y = "NMDS2") +
theme(plot.title = element_text(hjust = 0.5))
# NMDS for Group 2: Environmental and Geographical Metrics
env_geo_variables <- data[, c("EAL_SCORE", "elevation", "latitude", "longitude", "usda_zones_dec")]
nmds_env_geo <- metaMDS(env_geo_variables, distance = "euclidean", k = 2, trymax = 100)
envfit_env_geo <- envfit(nmds_env_geo, env_geo_variables, perm = 999)
nmds_scores_env_geo <- as.data.frame(scores(nmds_env_geo, "sites"))
env_scores_env_geo <- as.data.frame(scores(envfit_env_geo, "vectors"))
env_scores_env_geo$Variable <- rownames(env_scores_env_geo)
# Plot NMDS for Environmental and Geographical Metrics
ggplot() +
geom_point(data = nmds_scores_env_geo, aes(x = NMDS1, y = NMDS2), size = 3, color = "black") +
geom_text_repel(data = nmds_scores_env_geo, aes(x = NMDS1, y = NMDS2, label = rownames(nmds_scores_env_geo)), size = 3, color = "darkgray", box.padding = 0.5) +
geom_segment(data = env_scores_env_geo, aes(x = 0, xend = NMDS1, y = 0, yend = NMDS2),
arrow = arrow(length = unit(0.3, "cm")), color = "blue") +
geom_text_repel(data = env_scores_env_geo, aes(x = NMDS1, y = NMDS2, label = Variable),
color = "blue", size = 4, box.padding = 0.5) +
theme_minimal() +
labs(title = "NMDS Plot for Environmental and Geographical Metrics",
x = "NMDS1",
y = "NMDS2") +
theme(plot.title = element_text(hjust = 0.5))
# NMDS for Group 3: Textual and Statistical Metrics
text_stat_variables <- data[, c("lit_score", "total_words", "skewness", "R_squared")]
nmds_text_stat <- metaMDS(text_stat_variables, distance = "euclidean", k = 2, trymax = 100)
envfit_text_stat <- envfit(nmds_text_stat, text_stat_variables, perm = 999)
nmds_scores_text_stat <- as.data.frame(scores(nmds_text_stat, "sites"))
env_scores_text_stat <- as.data.frame(scores(envfit_text_stat, "vectors"))
env_scores_text_stat$Variable <- rownames(env_scores_text_stat)
# Plot NMDS for Textual and Statistical Metrics
ggplot() +
geom_point(data = nmds_scores_text_stat, aes(x = NMDS1, y = NMDS2), size = 3, color = "black") +
geom_text_repel(data = nmds_scores_text_stat, aes(x = NMDS1, y = NMDS2, label = rownames(nmds_scores_text_stat)), size = 3, color = "darkgray", box.padding = 0.5) +
geom_segment(data = env_scores_text_stat, aes(x = 0, xend = NMDS1, y = 0, yend = NMDS2),
arrow = arrow(length = unit(0.3, "cm")), color = "blue") +
geom_text_repel(data = env_scores_text_stat, aes(x = NMDS1, y = NMDS2, label = Variable),
color = "blue", size = 4, box.padding = 0.5) +
theme_minimal() +
labs(title = "NMDS Plot for Textual and Statistical Metrics",
x = "NMDS1",
y = "NMDS2") +
theme(plot.title = element_text(hjust = 0.5))
# Install necessary packages if not already installed
if (!requireNamespace("vegan", quietly = TRUE)) {
install.packages("vegan")
}
if (!requireNamespace("ggplot2", quietly = TRUE)) {
install.packages("ggplot2")
}
if (!requireNamespace("ggrepel", quietly = TRUE)) {
install.packages("ggrepel")
}
# Load the necessary libraries
library(vegan)
library(ggplot2)
library(ggrepel)
# Set the working directory to where your data file is located
setwd("C:/Users/lamat/OneDrive/Documents/GitHub/NDMS_sept_2024")
# Load the data file
data <- read.csv("data_ALL_geocoded_stats_sept2024_for_nmds.csv")
# NMDS for Environmental and Geographical Metrics
env_geo_variables <- data[, c("EAL_SCORE", "elevation", "latitude", "longitude", "usda_zones_dec")]
nmds_env_geo <- metaMDS(env_geo_variables, distance = "euclidean", k = 2, trymax = 100)
envfit_env_geo <- envfit(nmds_env_geo, env_geo_variables, perm = 999)
nmds_scores_env_geo <- as.data.frame(scores(nmds_env_geo, "sites"))
env_scores_env_geo <- as.data.frame(scores(envfit_env_geo, "vectors"))
env_scores_env_geo$Variable <- rownames(env_scores_env_geo)
# Create a mapping of city names to their corresponding numbers on the plot
city_labels <- data$City  # Assuming 'City' is the column with city names
names(nmds_scores_env_geo) <- city_labels
# Load the necessary libraries
library(vegan)
library(ggplot2)
library(ggrepel)
# Set the working directory to where your data file is located
setwd("C:/Users/lamat/OneDrive/Documents/GitHub/NDMS_sept_2024")
# Load the data file
data <- read.csv("data_ALL_geocoded_stats_sept2024_for_nmds.csv")
# NMDS for Environmental and Geographical Metrics
env_geo_variables <- data[, c("EAL_SCORE", "elevation", "latitude", "longitude", "usda_zones_dec")]
nmds_env_geo <- metaMDS(env_geo_variables, distance = "euclidean", k = 2, trymax = 100)
envfit_env_geo <- envfit(nmds_env_geo, env_geo_variables, perm = 999)
nmds_scores_env_geo <- as.data.frame(scores(nmds_env_geo, "sites"))
env_scores_env_geo <- as.data.frame(scores(envfit_env_geo, "vectors"))
env_scores_env_geo$Variable <- rownames(env_scores_env_geo)
# Create a mapping of city names to their corresponding numbers on the plot
city_labels <- data$City  # Assuming 'City' is the column with city names
names(nmds_scores_env_geo) <- city_labels
# Load the necessary libraries
library(vegan)
library(ggplot2)
library(ggrepel)
# Set the working directory to where your data file is located
setwd("C:/Users/lamat/OneDrive/Documents/GitHub/NDMS_sept_2024")
# Load the data file
data <- read.csv("data_ALL_geocoded_stats_sept2024_for_nmds.csv")
# NMDS for Environmental and Geographical Metrics
env_geo_variables <- data[, c("EAL_SCORE", "elevation", "latitude", "longitude", "usda_zones_dec")]
nmds_env_geo <- metaMDS(env_geo_variables, distance = "euclidean", k = 2, trymax = 100)
envfit_env_geo <- envfit(nmds_env_geo, env_geo_variables, perm = 999)
nmds_scores_env_geo <- as.data.frame(scores(nmds_env_geo, "sites"))
env_scores_env_geo <- as.data.frame(scores(envfit_env_geo, "vectors"))
env_scores_env_geo$Variable <- rownames(env_scores_env_geo)
# Add city names to the NMDS scores dataframe
nmds_scores_env_geo$City <- data$City
# Plot NMDS for Environmental and Geographical Metrics with Larger Arrows and Legend
ggplot() +
geom_point(data = nmds_scores_env_geo, aes(x = NMDS1, y = NMDS2), size = 3, color = "black") +
geom_text_repel(data = nmds_scores_env_geo, aes(x = NMDS1, y = NMDS2, label = rownames(nmds_scores_env_geo)), size = 3, color = "darkgray", box.padding = 0.5) +
# Make arrows thicker and more visible
geom_segment(data = env_scores_env_geo, aes(x = 0, xend = NMDS1, y = 0, yend = NMDS2),
arrow = arrow(length = unit(0.5, "cm")), color = "blue", size = 1.5) +
geom_text_repel(data = env_scores_env_geo, aes(x = NMDS1, y = NMDS2, label = Variable),
color = "blue", size = 5, box.padding = 0.5) +
# Add legend for city numbers
theme_minimal() +
labs(title = "NMDS Plot for Environmental and Geographical Metrics",
x = "NMDS1",
y = "NMDS2") +
theme(plot.title = element_text(hjust = 0.5)) +
# Add a custom legend for city numbers
annotate("text", x = max(nmds_scores_env_geo$NMDS1) + 0.5, y = max(nmds_scores_env_geo$NMDS2),
label = paste(1:nrow(nmds_scores_env_geo), nmds_scores_env_geo$City, sep = " = "), hjust = 0, size = 3) +
theme(legend.position = "none")
